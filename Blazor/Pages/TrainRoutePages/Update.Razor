@page "/train-routes/update/{id}"
@inject HttpClient HttpClient
@using System.Net.Http.Json;
@using System.Net.Http.Headers;
@using Blazor.Data;
@inject NavigationManager Navigation

<PageTitle>Update Train Route</PageTitle>

<h1>Update Train Route</h1>

<a class="btn btn-primary" href="/train-routes" role="button">Return</a>

<form method="post" onsubmit="@OnSubmit">
    <fieldset>
        <legend>Train Route Details</legend>
        <div>
            <label for="LineId">Select Line:</label>
            <select @bind="selectedLineId">
                <option value="none" selected disabled hidden>Select an Option</option> 
                @foreach (var line in lines)
                {
                    <option value="@line.id">@line.name</option>
                }
            </select>
        </div>
        <div>
            <label for="CityIds">City IDs (comma-separated):</label>
            <input type="text" @bind="citiesIds" />
        </div>
        <div>
            <label for="Mileage">Mileage (comma-separated):</label>
            <input type="text" @bind="mileage" />
        </div>
        <div>
            <label>&nbsp;</label>
            <input type="submit" value="Update" />
        </div>
    </fieldset>
</form>

<p role="status">Status: @updateRouteStatus</p>

@code {
    private TrainRoute updatedTrainRoute = new TrainRoute();
    private string citiesIds = "";
    private string mileage = "";
    private string updateRouteStatus = "";
    private List<Line> lines = new List<Line>();
    private int selectedLineId;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        lines = await HttpClient.GetFromJsonAsync<List<Line>>("http://api:8082/Line");

        var existingRoute = await HttpClient.GetFromJsonAsync<TrainRoute>($"http://api:8082/TrainRoute/{Id}");

        if (existingRoute != null)
        {
            selectedLineId = existingRoute.id;
            citiesIds = existingRoute.citiesIds;
            mileage = existingRoute.mileage;
        }
        else
        {
            Navigation.NavigateTo("/train-routes");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            updatedTrainRoute.id = int.Parse(Id);
            updatedTrainRoute.lineId = selectedLineId; 
            updatedTrainRoute.citiesIds = citiesIds;
            updatedTrainRoute.mileage = mileage;

            var response = await HttpClient.PutAsJsonAsync($"http://api:8082/TrainRoute/{Id}", updatedTrainRoute);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/train-routes");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                updateRouteStatus = $"Error: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            updateRouteStatus = $"Error: {ex.Message}";
        }
    }

    private string SerializeCityIds(List<int> cityIds)
    {
        return string.Join(",", cityIds);
    }

    private string SerializeMileage(List<int> mileage)
    {
        return string.Join(",", mileage);
    }
}
